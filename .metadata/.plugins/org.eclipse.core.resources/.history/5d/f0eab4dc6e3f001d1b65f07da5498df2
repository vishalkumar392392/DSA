package com.basic.smart.inteviews;

import java.util.Scanner;

public class FindingCubeRoot {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		int size = sc.nextInt();

		for (int i = 0; i < size; i++) {
			long num = sc.nextLong();
//			long cube = cube(num < 0 ? -(num) : num);
			long cube = cube(num);
			System.out.println(cube);
		}

//		sc.close();
//		System.out.println(squareRoot(25));
//
//		for (int i = 1; i <= 125; i++) {
//			long ans = squareRoot1(i);
//			if (ans > 0) {
//				System.out.println("ans: " + ans);
//
//			}
//			if (ans > 0) {
//				long res = ans * squareRoot(i);
//				System.out.println(ans + "*" + squareRoot(i) + ": ->"+res);
//			}
//		}

	}

	public static void cubeRoot(long num) {
		for (int i = 1; i <= num; i++) {
			long ans = squareRoot1(i);
			if (ans > 0) {

			}
			if (ans > 0) {
				long res = ans * squareRoot(i);
				if (res == num) {
					System.out.println(res);
				}
//				System.out.println(ans + "*" + squareRoot(i) + ": ->" + res);
			}
		}
	}

	public static long squareRoot(int num) {

		int p1 = 0;
		int p2 = num;
		long ans = Integer.MIN_VALUE;

		while (p1 <= p2) {
			int mid = (p1 + p2) / 2;
			if (mid * mid == num) {
				return mid;
			} else if (mid * mid > num) {
				p2 = mid - 1;
			} else {
				p1 = mid + 1;
			}
		}

		return ans;
	}

	public static long squareRoot1(long num) {

		long p1 = 0;
		long p2 = num;
		long ans = Integer.MIN_VALUE;

		while (p1 <= p2) {
			long mid = (p1 + p2) / 2;
			if (mid * mid == num) {
				return num;
			} else if (mid * mid > num) {
				p2 = mid - 1;
			} else {
				p1 = mid + 1;
			}
		}

		return ans;
	}

	public static long cube(long num) {

		long p1 = 0;
		long p2 = num;
		long ans = Integer.MIN_VALUE;

		while (p1 <= p2) {
			long mid = (p1 + p2) / 2;
			if (mid * mid * mid == num) {
				return mid;
			} else if (mid * mid * mid > num) {
				p2 = mid - 1;
			} else {
				p1 = mid + 1;
			}
		}

		return ans;
	}
}
